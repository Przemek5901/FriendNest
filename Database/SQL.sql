-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."BLOCKED_USER"
(
    "BLOCKER_ID" integer NOT NULL,
    "BLOCKED_ID" integer NOT NULL,
    "CREATED_AT" timestamp with time zone NOT NULL,
    CONSTRAINT "BLOCKED_USER_pkey" PRIMARY KEY ("BLOCKER_ID", "BLOCKED_ID")
);

COMMENT ON TABLE public."BLOCKED_USER"
    IS 'Tabela która definiuje blokowanie użytkowników';

COMMENT ON COLUMN public."BLOCKED_USER"."BLOCKER_ID"
    IS 'Id użytkownika blokującego';

COMMENT ON COLUMN public."BLOCKED_USER"."BLOCKED_ID"
    IS 'Id użytkownika którego blokujemy';

COMMENT ON COLUMN public."BLOCKED_USER"."CREATED_AT"
    IS 'Data utworzenia blokady';

CREATE TABLE IF NOT EXISTS public."CHAT"
(
    "CHAT_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "USER_1" integer NOT NULL,
    "USER_2" integer NOT NULL,
    "CREATED_AT" timestamp with time zone,
    CONSTRAINT "CHAT_pkey" PRIMARY KEY ("CHAT_ID")
);

COMMENT ON TABLE public."CHAT"
    IS 'Tabela przechowująca czaty użytkowników';

COMMENT ON COLUMN public."CHAT"."CHAT_ID"
    IS 'Identyfikator czatu';

COMMENT ON COLUMN public."CHAT"."USER_1"
    IS 'Identyfikator pierwszego użytkownika uczestniczącego w czacie';

COMMENT ON COLUMN public."CHAT"."USER_2"
    IS 'Identyfikator drugiego użytkownika uczestniczącego w czacie.';

COMMENT ON COLUMN public."CHAT"."CREATED_AT"
    IS 'Data utworzenia czatu';

CREATE TABLE IF NOT EXISTS public."COMMENT"
(
    "COMMENT_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "POST_ID" integer,
    "USER_ID" integer NOT NULL,
    "PARENT_COMMENT_ID" integer,
    "CONTENT" character varying(150) COLLATE pg_catalog."default",
    "IMAGE_URL" character varying(255) COLLATE pg_catalog."default",
    "CREATED_AT" timestamp with time zone NOT NULL,
    CONSTRAINT "COMMENT_pkey" PRIMARY KEY ("COMMENT_ID")
);

COMMENT ON TABLE public."COMMENT"
    IS 'Tabela z komentarzami do postów';

COMMENT ON COLUMN public."COMMENT"."COMMENT_ID"
    IS 'Identyfikator komentarza';

COMMENT ON COLUMN public."COMMENT"."USER_ID"
    IS 'Identyfikator użytkownika który dodał komentarz';

COMMENT ON COLUMN public."COMMENT"."PARENT_COMMENT_ID"
    IS 'Identyfikator komentarza na który odpowiadamy';

COMMENT ON COLUMN public."COMMENT"."CONTENT"
    IS 'Treść komentarza';

COMMENT ON COLUMN public."COMMENT"."IMAGE_URL"
    IS 'Ścieżka zdjęcia dodanego do komentarza ';

COMMENT ON COLUMN public."COMMENT"."CREATED_AT"
    IS 'Data utworzenia komentarza';

CREATE TABLE IF NOT EXISTS public."FOLLOW"
(
    "FOLLOWER_ID" integer NOT NULL,
    "FOLLOWED_ID" integer NOT NULL,
    "CREATED_AT" timestamp with time zone NOT NULL,
    CONSTRAINT "FOLLOW_pkey" PRIMARY KEY ("FOLLOWER_ID", "FOLLOWED_ID")
);

COMMENT ON TABLE public."FOLLOW"
    IS 'Tabela która definiuje obserwowanie użytkowników';

CREATE TABLE IF NOT EXISTS public."HASHTAG"
(
    "HASHTAG_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "TAG" character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "HASHTAG_pkey" PRIMARY KEY ("HASHTAG_ID")
);

COMMENT ON TABLE public."HASHTAG"
    IS 'Tabela z hashtagami';

CREATE TABLE IF NOT EXISTS public."INTERACTION"
(
    "INTERACTION_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "USER_ID" integer NOT NULL,
    "POST_ID" integer NOT NULL,
    "COMMENT_ID" integer,
    "INTERACTION_TYPE" integer,
    "CREATED_AT" timestamp with time zone NOT NULL,
    "NEW_POST_ID" integer,
    CONSTRAINT "INTERACTION_pkey" PRIMARY KEY ("INTERACTION_ID")
);

COMMENT ON TABLE public."INTERACTION"
    IS 'Tabela z interakcjali do postu lub komentarza';

COMMENT ON COLUMN public."INTERACTION"."INTERACTION_ID"
    IS 'Identyfikator interakcji';

COMMENT ON COLUMN public."INTERACTION"."USER_ID"
    IS 'Identyfikator użytkownika który dał reakcję';

COMMENT ON COLUMN public."INTERACTION"."POST_ID"
    IS 'Identyfikator postu do którego dajemy reakcję';

COMMENT ON COLUMN public."INTERACTION"."COMMENT_ID"
    IS 'Identyfikator komentarza do którego dajemy reakcję';

COMMENT ON COLUMN public."INTERACTION"."INTERACTION_TYPE"
    IS 'Typ dodanej interakcji
1 - polubienie
2 - negatywna reakcja
3 - podaj dalej
4 - cytuj 
';

COMMENT ON COLUMN public."INTERACTION"."CREATED_AT"
    IS 'Data utworzenia reakcji';

CREATE TABLE IF NOT EXISTS public."MESSAGE"
(
    "MESSAGE_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "CHAT_ID" integer NOT NULL,
    "SENDER_ID" integer NOT NULL,
    "CONTENT" character varying(255) COLLATE pg_catalog."default",
    "IMAGE_URL" character varying(255) COLLATE pg_catalog."default",
    "CREATED_AT" timestamp with time zone NOT NULL,
    CONSTRAINT "MESSAGE_pkey" PRIMARY KEY ("MESSAGE_ID")
);

COMMENT ON TABLE public."MESSAGE"
    IS 'Tabela przechowująca wiadomość';

COMMENT ON COLUMN public."MESSAGE"."MESSAGE_ID"
    IS 'Identyfikator wiadomości';

COMMENT ON COLUMN public."MESSAGE"."CHAT_ID"
    IS 'Identyfikator czatu w którym znajduje się wiadomość';

COMMENT ON COLUMN public."MESSAGE"."SENDER_ID"
    IS 'Identyfikator użytkownika który wysłał wiadomość';

COMMENT ON COLUMN public."MESSAGE"."CONTENT"
    IS 'Treść wiadomości';

COMMENT ON COLUMN public."MESSAGE"."IMAGE_URL"
    IS 'Zdjęcie przesłane w wiadomości';

COMMENT ON COLUMN public."MESSAGE"."CREATED_AT"
    IS 'Data utworzenia wiadomości';

CREATE TABLE IF NOT EXISTS public."POST"
(
    "POST_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "USER_ID" integer NOT NULL,
    "CONTENT" character varying(150) COLLATE pg_catalog."default",
    "IMAGE_URL" character varying(255) COLLATE pg_catalog."default",
    "CATEGORY" character varying(30) COLLATE pg_catalog."default",
    "CREATED_AT" timestamp with time zone NOT NULL,
    CONSTRAINT "POST_pkey" PRIMARY KEY ("POST_ID")
);

COMMENT ON TABLE public."POST"
    IS 'Tabela z postami użytkownika';

COMMENT ON COLUMN public."POST"."POST_ID"
    IS 'Identyfikator postu';

COMMENT ON COLUMN public."POST"."USER_ID"
    IS 'Identyfikator użytkownika który dodał post';

COMMENT ON COLUMN public."POST"."CONTENT"
    IS 'Zawartość postu ';

COMMENT ON COLUMN public."POST"."IMAGE_URL"
    IS 'Scieżka do zdjęcia umieszczonego w poście';

COMMENT ON COLUMN public."POST"."CATEGORY"
    IS 'Kategoria dodanego postu';

COMMENT ON COLUMN public."POST"."CREATED_AT"
    IS 'Data utworzenia postu';

CREATE TABLE IF NOT EXISTS public."POST_HASHTAG"
(
    "HASHTAG_ID" integer NOT NULL,
    "POST_ID" integer NOT NULL,
    CONSTRAINT "POST_HASHTAG_pkey" PRIMARY KEY ("POST_ID", "HASHTAG_ID")
);

COMMENT ON TABLE public."POST_HASHTAG"
    IS 'Tabela pośrednia między postem a hashtagiem';

CREATE TABLE IF NOT EXISTS public."USER"
(
    "USER_ID" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "LOGIN" character varying(30) COLLATE pg_catalog."default" NOT NULL,
    "PASSWORD_HASH" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "GENDER" character varying(1) COLLATE pg_catalog."default" NOT NULL,
    "PHONE_NUMBER" character varying(15) COLLATE pg_catalog."default",
    "BIRTHDATE" date,
    "PROFILE_NAME" character varying(30) COLLATE pg_catalog."default" NOT NULL,
    "USER_NAME" character varying(30) COLLATE pg_catalog."default" NOT NULL,
    "PROFILE_IMAGE_URL" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "BACKGROUND_IMAGE_URL" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "CREATED_AT" timestamp with time zone NOT NULL,
    "UPDATED_AT" timestamp with time zone NOT NULL,
    "PROFILE_DESC" character varying(150) COLLATE pg_catalog."default",
    CONSTRAINT "USER_pkey" PRIMARY KEY ("USER_ID")
);

COMMENT ON TABLE public."USER"
    IS 'Table przechowująca dane użytkownika';

COMMENT ON COLUMN public."USER"."USER_ID"
    IS 'Identyfikator użytkownika';

COMMENT ON COLUMN public."USER"."LOGIN"
    IS 'Login użytkownika';

COMMENT ON COLUMN public."USER"."PASSWORD_HASH"
    IS 'Zaszyfrowane hasło użytkownika';

COMMENT ON COLUMN public."USER"."GENDER"
    IS 'Płeć użytkownika 
M - Mężczyzna
K - Kobieta
O - Inna płeć';

COMMENT ON COLUMN public."USER"."PHONE_NUMBER"
    IS 'Numer telefonu użytkownika';

COMMENT ON COLUMN public."USER"."BIRTHDATE"
    IS 'Data urodzenia użytkownika';

COMMENT ON COLUMN public."USER"."PROFILE_NAME"
    IS 'Nazwa profilu użytkownika';

COMMENT ON COLUMN public."USER"."USER_NAME"
    IS 'Nazwa użytkownika do identyfikacji profilu';

COMMENT ON COLUMN public."USER"."PROFILE_IMAGE_URL"
    IS 'Ścieżka do zdjęcia profilowego użytkownika';

COMMENT ON COLUMN public."USER"."BACKGROUND_IMAGE_URL"
    IS 'Ścieżka do zdjęcia w tle użytkownika';

COMMENT ON COLUMN public."USER"."CREATED_AT"
    IS 'Data utworzenia konta';

COMMENT ON COLUMN public."USER"."UPDATED_AT"
    IS 'Data aktualizacji konta';

COMMENT ON COLUMN public."USER"."PROFILE_DESC"
    IS 'Opis profilu użytkownika';

ALTER TABLE IF EXISTS public."BLOCKED_USER"
    ADD CONSTRAINT "BLOCKED_USER_BLOCKED_ID_fkey" FOREIGN KEY ("BLOCKED_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."BLOCKED_USER"
    ADD CONSTRAINT "BLOCKED_USER_BLOCKER_ID_fkey" FOREIGN KEY ("BLOCKER_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."CHAT"
    ADD CONSTRAINT "CHAT_USER_1_fkey" FOREIGN KEY ("USER_1")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."CHAT"
    ADD CONSTRAINT "CHAT_USER_2_fkey" FOREIGN KEY ("USER_2")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."COMMENT"
    ADD CONSTRAINT "COMMENT_PARENT_COMMENT_ID_fkey" FOREIGN KEY ("PARENT_COMMENT_ID")
    REFERENCES public."COMMENT" ("COMMENT_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."COMMENT"
    ADD CONSTRAINT "COMMENT_POST_ID_fkey" FOREIGN KEY ("POST_ID")
    REFERENCES public."POST" ("POST_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."COMMENT"
    ADD CONSTRAINT "COMMENT_USER_ID_fkey" FOREIGN KEY ("USER_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."FOLLOW"
    ADD CONSTRAINT "FOLLOW_FOLLOWED_ID_fkey" FOREIGN KEY ("FOLLOWED_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."FOLLOW"
    ADD CONSTRAINT "FOLLOW_FOLLOWER_ID_fkey" FOREIGN KEY ("FOLLOWER_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."INTERACTION"
    ADD CONSTRAINT "INTERACTION_COMMENT_ID_fkey" FOREIGN KEY ("COMMENT_ID")
    REFERENCES public."COMMENT" ("COMMENT_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."INTERACTION"
    ADD CONSTRAINT "INTERACTION_NEW_POST_ID_fkey" FOREIGN KEY ("NEW_POST_ID")
    REFERENCES public."POST" ("POST_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."INTERACTION"
    ADD CONSTRAINT "INTERACTION_POST_ID_fkey" FOREIGN KEY ("POST_ID")
    REFERENCES public."POST" ("POST_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."INTERACTION"
    ADD CONSTRAINT "INTERACTION_USER_ID_fkey" FOREIGN KEY ("USER_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."MESSAGE"
    ADD CONSTRAINT "MESSAGE_CHAT_ID_fkey" FOREIGN KEY ("CHAT_ID")
    REFERENCES public."CHAT" ("CHAT_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."MESSAGE"
    ADD CONSTRAINT "MESSAGE_SENDER_ID_fkey" FOREIGN KEY ("SENDER_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."POST"
    ADD CONSTRAINT "POST_USER_ID_fkey" FOREIGN KEY ("USER_ID")
    REFERENCES public."USER" ("USER_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public."POST_HASHTAG"
    ADD CONSTRAINT "POST_HASHTAG_HASHTAG_ID_fkey" FOREIGN KEY ("HASHTAG_ID")
    REFERENCES public."HASHTAG" ("HASHTAG_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."POST_HASHTAG"
    ADD CONSTRAINT "POST_HASHTAG_POST_ID_fkey" FOREIGN KEY ("POST_ID")
    REFERENCES public."POST" ("POST_ID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;

END;